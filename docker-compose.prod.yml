# 矿区安全数据库前端 - 生产环境Docker Compose配置
# 专为生产环境优化的容器编排方案

version: '3.8'

services:
  # ================================
  # 前端应用服务
  # ================================
  mining-frontend:
    # 生产环境直接从GitHub Container Registry拉取镜像
    image: ${DOCKER_IMAGE:-ghcr.io/muqy1818/mining-safety-db-frontend:latest}
    
    # 仅本地开发时构建（注释掉用于生产）
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    #   args:
    #     - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL:-https://mining-backend.ziven.site/api}
    #     - REACT_APP_SILICONFLOW_API_KEY=${REACT_APP_SILICONFLOW_API_KEY}
    container_name: mining-frontend-prod
    
    restart: unless-stopped
    
    ports:
      - "${FRONTEND_PORT:-80}:80"
    
    environment:
      - NODE_ENV=production
      - TZ=Asia/Shanghai
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
      # AI服务配置 - 必须在运行时提供真实的API密钥
      - REACT_APP_SILICONFLOW_API_KEY=${REACT_APP_SILICONFLOW_API_KEY}
      - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL:-https://mining-backend.ziven.site/api}
    
    volumes:
      # Nginx日志挂载到主机
      - ./logs/nginx:/var/log/nginx
      # 自定义nginx配置（如果需要运行时修改）
      - ./docker/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/security-headers.conf:/etc/nginx/security-headers.conf:ro
      # 静态资源缓存目录
      - nginx_cache:/var/cache/nginx
    
    networks:
      - frontend_network
      - monitoring_network
    
    healthcheck:
      test: ["/usr/local/bin/healthcheck.sh", "quick"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${FRONTEND_DOMAIN:-mining-frontend.local}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "com.docker.compose.service=frontend"
      - "com.docker.compose.version=${COMPOSE_VERSION:-1.0.0}"
      
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # ================================
  # 反向代理和负载均衡器（可选）
  # ================================
  nginx-proxy:
    image: nginx:1.25-alpine
    container_name: nginx-proxy-prod
    
    restart: unless-stopped
    
    ports:
      - "443:443"
      - "${HTTP_PORT:-80}:80"
    
    volumes:
      # 主nginx配置
      - ./docker/proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/proxy/conf.d:/etc/nginx/conf.d:ro
      # SSL证书（如果有）
      - ./docker/ssl:/etc/nginx/ssl:ro
      # 日志
      - ./logs/proxy:/var/log/nginx
    
    networks:
      - frontend_network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    depends_on:
      - mining-frontend
    
    labels:
      - "com.docker.compose.service=nginx-proxy"

  # ================================
  # 监控和日志收集
  # ================================
  log-collector:
    image: fluent/fluent-bit:2.1
    container_name: mining-log-collector
    
    restart: unless-stopped
    
    volumes:
      - ./logs:/logs:ro
      - ./docker/fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - ./docker/fluent-bit/parsers.conf:/fluent-bit/etc/parsers.conf:ro
    
    networks:
      - monitoring_network
    
    depends_on:
      - mining-frontend
    
    labels:
      - "com.docker.compose.service=log-collector"

  # ================================
  # 指标收集（Prometheus兼容）
  # ================================
  metrics-exporter:
    image: nginx/nginx-prometheus-exporter:0.11
    container_name: mining-metrics-exporter
    
    restart: unless-stopped
    
    ports:
      - "${METRICS_PORT:-9113}:9113"
    
    command: [
      "-nginx.scrape-uri", 
      "http://mining-frontend/nginx-status",
      "-web.listen-address", 
      ":9113"
    ]
    
    networks:
      - frontend_network
      - monitoring_network
    
    depends_on:
      - mining-frontend
    
    labels:
      - "com.docker.compose.service=metrics-exporter"

  # ================================
  # Prometheus监控（可选）
  # ================================
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: mining-prometheus
    
    restart: unless-stopped
    
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    
    networks:
      - monitoring_network
    
    labels:
      - "com.docker.compose.service=prometheus"

  # ================================
  # Grafana可视化（可选）
  # ================================
  grafana:
    image: grafana/grafana:10.0.0
    container_name: mining-grafana
    
    restart: unless-stopped
    
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:${GRAFANA_PORT:-3001}
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    
    networks:
      - monitoring_network
    
    depends_on:
      - prometheus
    
    labels:
      - "com.docker.compose.service=grafana"

# ================================
# 网络配置
# ================================
networks:
  frontend_network:
    driver: bridge
    name: mining-frontend-network
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    
  monitoring_network:
    driver: bridge
    name: mining-monitoring-network

# ================================
# 数据卷配置
# ================================
volumes:
  nginx_cache:
    driver: local
    name: mining-nginx-cache
  
  prometheus_data:
    driver: local
    name: mining-prometheus-data
  
  grafana_data:
    driver: local
    name: mining-grafana-data