# 矿区安全数据库 - Docker Compose配置
# 支持开发和生产环境的容器编排

version: '3.8'

services:
  # ================================
  # 前端服务 (React + Nginx)
  # ================================
  mining-frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        # 构建时环境变量
        REACT_APP_API_BASE_URL: ${REACT_APP_API_BASE_URL:-https://mining-backend.ziven.site/api}
        REACT_APP_SILICONFLOW_API_KEY: ${REACT_APP_SILICONFLOW_API_KEY:-}
    
    container_name: mining-frontend
    
    # 端口映射
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    
    # 环境变量
    environment:
      - TZ=Asia/Shanghai
      - NODE_ENV=production
    
    # 依赖服务 (如果后端也在同一compose中)
    # depends_on:
    #   - mining-backend
    
    # 卷挂载 (可选：用于开发时热更新)
    volumes:
      # 日志目录挂载
      - ./logs/nginx:/var/log/nginx
    
    # 重启策略
    restart: unless-stopped
    
    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    
    # 网络配置
    networks:
      - mining-network
    
    # 标签
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`mining.localhost`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "project=mining-database"
      - "service=frontend"

  # ================================
  # Redis缓存服务 (可选)
  # ================================
  mining-redis:
    image: redis:7-alpine
    container_name: mining-redis
    
    ports:
      - "${REDIS_PORT:-6379}:6379"
    
    environment:
      - TZ=Asia/Shanghai
    
    # Redis配置
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --timeout 300
    
    volumes:
      - redis-data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    networks:
      - mining-network
    
    labels:
      - "project=mining-database"
      - "service=redis"

  # ================================
  # Nginx反向代理 (可选，用于多服务)
  # ================================
  mining-proxy:
    image: nginx:1.25-alpine
    container_name: mining-proxy
    
    ports:
      - "${PROXY_PORT:-80}:80"
      - "${PROXY_HTTPS_PORT:-443}:443"
    
    volumes:
      - ./docker/proxy-nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - ./logs/proxy:/var/log/nginx
    
    depends_on:
      - mining-frontend
    
    restart: unless-stopped
    
    networks:
      - mining-network
    
    labels:
      - "project=mining-database"
      - "service=proxy"

# ================================
# 网络配置
# ================================
networks:
  mining-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# 卷配置
# ================================
volumes:
  # Redis数据持久化
  redis-data:
    driver: local
    
  # 日志卷
  frontend-logs:
    driver: local
    
  # SSL证书卷 (如果需要HTTPS)
  ssl-certs:
    driver: local

# ================================
# 扩展配置文件
# ================================
# 可以通过以下命令使用不同的配置文件：
# docker-compose -f docker-compose.yml -f docker-compose.override.yml up
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up